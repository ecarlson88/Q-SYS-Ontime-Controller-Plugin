-- Information block for the plugin
PluginInfo = {
    Name = "Ontime Controller",
    Version = "3.0.0",
    BuildVersion = "0.3.0.0",
    Id = "e228364d-8e3d-3253-be94-bcb75ha2c76e",
    Author = "Erik Carlson",
    Description = "Controller For Ontime"  
  }
  
  -- Define the color of the plugin object in the design
  function GetColor(props)
    return { 80, 80, 80 }
  end
  
    -- Define User configurable Properties of the plugin
  function GetProperties()
      local props = {}
      return props
    end
    
  -- The name that will initially display when dragged into a design
  function GetPrettyName(props)
    return "Ontime Controller " .. PluginInfo.Version
  end
  
  -- Optional function used if plugin has multiple pages
  PageNames = { "Timer", "Event","Messaging", "Info" }  --List the pages within the plugin
  function GetPages(props)
    local pages = {}
    for ix,name in ipairs(PageNames) do
      table.insert(pages, {name = PageNames[ix]})
    end
    return pages
  end

  -- Defines the Controls used within the plugin
  function GetControls(props)
    local ctrls = {}
    table.insert(ctrls, {
      Name = "Play",
      ControlType = "Button",
      ButtonType = "Trigger",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Play",
      IconColor = {47,133,90}
    })
    table.insert(ctrls, {
      Name = "Pause",
      ControlType = "Button",
      ButtonType = "Trigger",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Pause"
    })
    table.insert(ctrls, {
      Name = "Restart",
      ControlType = "Button",
      ButtonType = "Trigger",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Refresh"
    })
    table.insert(ctrls, {
      Name = "Blink",
      ControlType = "Button",
      ButtonType = "Toggle",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
    })
    table.insert(ctrls, {
      Name = "BlinkBlink",
      ControlType = "Button",
      ButtonType = "Toggle",
      Count = 1,
      UserPin = false,
      Icon = "Burst"
    })
    table.insert(ctrls, {
      Name = "Blank",
      ControlType = "Button",
      ButtonType = "Toggle",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Prohibited"
    })
    table.insert(ctrls, {
      Name = "T-MessageVis",
      ControlType = "Button",
      ButtonType = "Toggle",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Eye"
    })
    table.insert(ctrls, {
      Name = "P-MessageVis",
      ControlType = "Button",
      ButtonType = "Toggle",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Eye"
    })
    table.insert(ctrls, {
      Name = "Send TimerMessage",
      ControlType = "Button",
      ButtonType = "Trigger",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Checkbox"
    })
    table.insert(ctrls, {
      Name = "Send PublicMessage",
      ControlType = "Button",
      ButtonType = "Trigger",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Checkbox"
    })
    table.insert(ctrls, {
      Name = "Next",
      ControlType = "Button",
      ButtonType = "Trigger",
      Count = 1,
      UserPin = true,
      PinStyle = "Input",
      Icon = "Next"
    })
    table.insert(ctrls, {
        Name = "Previous",
        ControlType = "Button",
        ButtonType = "Trigger",
        Count = 1,
        UserPin = true,
        PinStyle = "Input",
        Icon = "Previous"
    })
    table.insert(ctrls, {
      Name = "Current T-Message",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "Current P-Message",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "TimerMessage",
      ControlType = "Text",
      Count = 1,
      PinStyle = "Input",
      UserPin = true
    })
    table.insert(ctrls, {
      Name = "PublicMessage",
      ControlType = "Text",
      Count = 1,
      PinStyle = "Input",
      UserPin = true
    })
    table.insert(ctrls, {
      Name = "Event_Title",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "Event_Subtitle",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "Presenter",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "Note",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "Next_Event_Title",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "Next_Event_Subtitle",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "Next_Presenter",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "Next_Note",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "Time_Remaining",
      ControlType = "Text",
      Count = 1,
      UserPin = false,
      FontSize = 28,
      FrontColor = {255,255,255}
    })
    table.insert(ctrls, {
      Name = "Neg_Time_Remaining",
      ControlType = "Text",
      Count = 1,
      UserPin = false,
      FontSize = 28,
      FrontColor = {255,0,0}
    })
    table.insert(ctrls, {
      Name = "ontime_IP",
      ControlType = "Text",
      Count = 1,
      UserPin = false
    })
    table.insert(ctrls, {
      Name = "Event_Index",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 0,
      Max = 100,
      Count = 1,
      UserPin = true,
      PinStyle = "Output",
    })
    table.insert(ctrls, {
      Name = "Event_Total",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 0,
      Max = 100,
      Count = 1,
      UserPin = true,
      PinStyle = "Output",
    })
    table.insert(ctrls,{
      Name = "On_Air",
      ControlType = "Indicator",
      IndicatorType = "Led",
      UserPin = true,
      PinStyle = "Output",
      Count = 1
    })
    table.insert(ctrls, {
      Name = "Set_OnAir",
      ControlType = "Button",
      ButtonType = "Toggle",
      Count = 1,
      UserPin = true,
      PinStyle = "Input"
    })
    return ctrls
  end
  
  
  --Layout of controls and graphics for the plugin UI to display
  function GetControlLayout(props)
  
      function getImages()
        VisEYE = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAABoklEQVRIS+2V0VECQRBEIQMz8IhAzeDMQCMAI0AjECNQI/CIADMQIhAjEDMwBPttzVwNW4t7P/xYTlXXHXO73dO9HIxHR67xkflHf1/gRBHOhFPhXGgs0q2u38KXsPgt5kMRQXwrzAXua/WkBXelRSUBJn0LxGvdb4RXmxoe1iA8FVojxtGlgLu+cgEWr2wzxEzFBghx48T0eLaz3mMQQoS9qaJAnBzLDwJTXQkvJspnymO71j3OKESIlepFogCxtELMEyL6jcDEnRHMTBTBieDCDMKznfV7BygzAQ8uwgYEESgdok98E4TRfxdII/XdwadNmS924bwPEdFxXkS5MGexn1y4ALaw11uzDU5ScgDpvRDPgUgRxXkSjmfgLjqzhwYbsNxkRBBARMUzcFEGTVFHATaRNxUndhf02ciBkjHXePB+JvSJNH27Su+Bi6xtIaQQEgdiEPh7wDV/FkWLv6ZsIBYvJlkaMaLE1hj8Taa3N7lvrv0WMXWtIH4WOgG3ezXk/4Cv6plN3NqkEIGPQ8Q1B7WpBz8f4mAwWWnhv0A1vh/irW0Zd35p/gAAAABJRU5ErkJggg=="
        NotVisEYE = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAABvklEQVRIS7WV4VHDMAxG2w0YIUwAbBAmACagbFAmIEwATABMABtQJoANGjZgBPRy+nKqa5v+SHynM5FlPX2yXZaLmcdy5vyLCDgy2O/UQAFI/mz2afY4JUSAU0v65YlvAwRwa3Zt1rih8tvV/tjc1QqKLSLRRwaCj7XaQDWF7Y30kEuQlVfd24wqFDNfmF16VpSde9wISgEEcxZsZsR2AXkwU4tYAwgMP8UxgGxEiAACaQfJ30NlEfLmiVTAlceSD8g6hcRbRHIg6icV5c6EHCszlKLm2Gf8+Fjr3T++A8hUwO1Aot6D/GyOSmKyG/t48cqZuI0UOvilYGsfjZwhOAJSCOdFy+7NurBH/kGFAMhC3ijNNyg47N9RQgtfgwLORuc0gOMhSwVykcdgA5JRV4IQk7aUQs/wlx5alJ1TASw9k858dw6jQG7izo8d362Zbs7GlVANh8ZmYFSbeydqzZg8B8BHMv0u8U0lT56YW8aIqqIS9ipmCKz9P0hvkOfOTmm7xqBD/uEAOjFrzFpXQgIqxVhnZCGHAGqVswa09OKrLfovcVwvQqZQIJAgtI03MIwpAWpXb39gswD22voHzlJzGe6L9m4AAAAASUVORK5CYII="
        Logo = ""
        end; getImages()
    local layout = {}
    local graphics = {}
    local CurrentPage = PageNames[props["page_index"].Value]
      --List of pages: "Timer", "Event","Messaging", "Info"    
      table.insert(graphics,{ --- black background
            Type = "GroupBox",
            Fill = {34,34,34},
            Radius = 8,
            Position = {5,5},
            Size = {600,295}
          })
        table.insert(graphics,{ ---gray background
            Type = "GroupBox",
            Fill = {45,45,45},
            Radius = 8,
            Position = {100,55},
            Size = {490,235}
          })
          table.insert(graphics, {
            Type = "Image",
            Image = Logo,
            Size = {92, 92},
            Position = {10,10}
          })
          table.insert(graphics,{
              Type = "Text",
              Text = "Ontime controller",
              Position = {100,15},
              Size = {225,38},
              FontSize = 24,
              Color = {128,128,101},
              Font = "Poppins",
              HTextAlign = "Left"
            })
            table.insert(graphics,{
              Type = "Text",
              Text = "ontime IP:",
              Position = {375,23},
              Size = {110,20},
              FontSize = 16,
              Color = {128,57,57},
              HTextAlign = "Left"
            })
            layout["ontime_IP"] = {
              PrettyName = "ontime IP",
              Style = "Text",
              FontSize = 12,
              Position = {455,23},
              Size = {105,20},
              }
    if CurrentPage == "Timer" then
      table.insert(graphics,{ --timer background
            Type = "GroupBox",
            Fill = {35,35,35},
            Radius = 8,
            Position = {110,64},
            Size = {470,105}
          })
      table.insert(graphics,{ --controls background
          Type = "GroupBox",
          Fill = {35,35,35},
          Radius = 8,
          Position = {110,176},
          Size = {470,105}
          })
          table.insert(graphics,{ ---event count /
          Type = "Text",
          Text = "/",
          Position = {540,70},
          Size = {15,20},
          FontSize = 12,
          Color = {220,220,220},
          HTextAlign = "Center"
        })
      layout["Play"] = {
        PrettyName = "Play",
        Style = "Button",
        Radius = 2,
        StrokeColor = {47,133,90},
        StrokeWidth = 1,
        ButtonVisualStyle = "Flat",
        Position = {178,182},
        Size = {90,45},
        Color = {51,158,78},
        UnlinkOffColor = true,
        OffColor = {28,28,28}
      }
      layout["Pause"] = {
        PrettyName = "Pause",
        Style = "Button",
        Radius = 2,
        StrokeColor = {109,63,33},
        StrokeWidth = 1,
        ButtonVisualStyle = "Flat",
        Position = {270,182},
        Size = {90,45},
        Color = {192,86,33},
        UnlinkOffColor = true,
        OffColor = {28,28,28}
      }
      layout["Previous"] = {
        PrettyName = "Previous",
        Style = "Button",
        Radius = 2,
        FontSize = 12,
        StrokeColor = {255,255,255},
        StrokeWidth = 1,
        ButtonVisualStyle = "Flat",
        Position = {178,228},
        Size = {90,45},
        Color = {40,40,40},
        UnlinkOffColor = true,
        OffColor = {28,28,28}
      }
      layout["Next"] = {
        PrettyName = "Next",
        Style = "Button",
        Radius = 2,
        FontSize = 12,
        StrokeColor = {255,255,255},
        StrokeWidth = 1,
        ButtonVisualStyle = "Flat",
        Position = {270,228},
        Size = {90,45},
        Color = {40,40,40},
        UnlinkOffColor = true,
        OffColor = {28,28,28}
      }
      layout["Restart"] = {
        PrettyName = "Restart",
        Style = "Button",
        Radius = 2,
        FontSize = 12,
        StrokeColor = {255,255,255},
        StrokeWidth = 1,
        ButtonVisualStyle = "Flat",
        Position = {372,182},
        Size = {50,90},
        Color = {40,40,40},
        UnlinkOffColor = true,
        OffColor = {28,28,28}
      }
      layout["BlinkBlink"] = {
        Style = "Button",
        Radius = 2,
        FontSize = 12,
        StrokeColor = {255,255,255},
        StrokeWidth = 1,
        ButtonVisualStyle = "Flat",
        Position = {421,182},
        Size = {50,90},
        Color = {10,67,185},
        UnlinkOffColor = true,
        OffColor = {28,28,28}
      }
      layout["Blink"] = {
        PrettyName = "Blink",
        Style = "Button",
        Radius = 2,
        StrokeColor = {255,255,255},
        StrokeWidth = 1,
        ButtonVisualStyle = "Flat",
        Position = {421,182},
        Size = {50,90},
        Color = {0,0,0,0},
        ZOrder = 200
      }
      layout["Blank"] = {
        PrettyName = "Black Out",
        Style = "Button",
        Radius = 2,
        FontSize = 12,
        StrokeColor = {255,255,255},
        StrokeWidth = 1,
        ButtonVisualStyle = "Flat",
        Position = {470,182},
        Size = {50,90},
        Color = {10,67,185},
        UnlinkOffColor = true,
        OffColor = {28,28,28}
      }
      layout["Time_Remaining"] = {
        PrettyName = "Time Remaining",
        Style = "Text",
        TextBoxStyle = "NoBackground",
        TextColor={225,225,225},
        Position = {208,75},
        Size = {260,75},
        IsReadOnly = true,
        FontSize = 62,
        }
      layout["Neg_Time_Remaining"] = {
          PrettyName = "Neg_Time Remaining",
          Style = "Text",
          TextBoxStyle = "NoBackground",
          TextColor={225,0,0},
          Position = {199,75},
          Size = {260,75},
          IsReadOnly = true,
          FontSize = 62,
         }
      layout["Event_Index"] = {
        PrettyName = "Event Index",
        Style = "Text",
        TextBoxStyle = "NoBackground",
        TextColor={225,225,225},
        Position = {522,70},
        Size = {20,20},
        IsReadOnly = true,
        FontSize = 13,
        HTextAlign = "Right"
        }
      layout["Event_Total"] = {
        PrettyName = "Event Total",
        TextBoxStyle = "NoBackground",
        TextColor={225,225,225},
        Position = {552,70},
        Size = {20,20},
        IsReadOnly = true,
        FontSize = 13,
        HTextAlign = "Left"
        }
      layout["On_Air"] = {
        Style="LED",
        Color={10,67,185},
        OffColor={64,64,64},
        StrokeWidth = 0,
        UnlinkOffColor=true,
        Position={120,70},
        Size={20,20},
        CornerRadius= 8
        }
      layout["Set_OnAir"] = {
        PrettyName="On Air",
        Style="button",
        Color={0,0,0,0},
        Position={120,70},
        Size={20,20},
        ZOrder = 200,
        CornerRadius = 8
        }
    elseif CurrentPage == "Event" then
      table.insert(graphics,{ --Current Event background
            Type = "GroupBox",
            Fill = {35,35,35},
            Radius = 8,
            Position = {110,64},
            Size = {470,105}
          })
      table.insert(graphics,{ --Next Event background
          Type = "GroupBox",
          Fill = {35,35,35},
          Radius = 8,
          Position = {110,176},
          Size = {470,105}
          })

      ----Event Counter----

        table.insert(graphics,{ ---event count /
          Type = "Text",
          Text = "/",
          Position = {540,70},
          Size = {15,20},
          FontSize = 12,
          Color = {220,220,220},
          HTextAlign = "Center"
          })
        layout["Event_Index"] = {
          PrettyName = "Event Index",
          Style = "Text",
          TextBoxStyle = "NoBackground",
          TextColor={225,225,225},
          Position = {522,70},
          Size = {20,20},
          IsReadOnly = true,
          FontSize = 13,
          HTextAlign = "Right"
          }
        layout["Event_Total"] = {
          PrettyName = "Event Total",
          TextBoxStyle = "NoBackground",
          TextColor={225,225,225},
          Position = {552,70},
          Size = {20,20},
          IsReadOnly = true,
          FontSize = 13,
          HTextAlign = "Left"
          }

      ----Current Event Stuff

        table.insert(graphics,{
            Type = "Text",
            Text = "Event Title",
            Position = {168,64},
            Size = {120,30},
            FontSize = 14,
            Color = {220,220,220},
            HTextAlign = "Left"
          })
          layout["Event_Title"] = {
            PrettyName = "Event Title",
            Style = "Text",
            FontSize = 10,
            IsReadOnly = true,
            Position = {170,89},
            Size = {165,25},
            }
        table.insert(graphics,{
            Type = "Text",
            Text = "Event Subtitle",
            Position = {168,110},
            Size = {120,30},
            FontSize = 14,
            Color = {220,220,220},
            HTextAlign = "Left"
          })          
          layout["Event_Subtitle"] = {
            PrettyName = "Event Subtitle",
            Style = "Text",
            FontSize = 10,
            IsReadOnly = true,
            Position = {170,136},
            Size = {165,25},
            }
        table.insert(graphics,{
            Type = "Text",
            Text = "Presenter",
            Position = {349,64},
            Size = {120,30},
            FontSize = 14,
            Color = {220,220,220},
            HTextAlign = "Left"
          })
          layout["Presenter"] = {
            PrettyName = "Presenter",
            Style = "Text",
            FontSize = 10,
            IsReadOnly = true,
            Position = {349,89},
            Size = {165,25},
            }
        table.insert(graphics,{
            Type = "Text",
            Text = "Event Notes",
            Position = {349,110},
            Size = {120,30},
            FontSize = 14,
            Color = {220,220,220},
            HTextAlign = "Left"
          })
          layout["Note"] = {
            PrettyName = "Event Notes",
            Style = "Text",
            FontSize = 10,
            IsReadOnly = true,
            Position = {349,136},
            Size = {165,25},
            }
      ----Next Event Stuff----
      
        table.insert(graphics,{
            Type = "Text",
            Text = "Next Event Title",
            Position = {168,172},
            Size = {120,30},
            FontSize = 14,
            Color = {220,220,220},
            HTextAlign = "Left"
          })
        table.insert(graphics,{
            Type = "Text",
            Text = "Next Event Subtitle",
            Position = {168,222},
            Size = {125,30},
            FontSize = 14,
            Color = {220,220,220},
            HTextAlign = "Left"
          })
        table.insert(graphics,{
            Type = "Text",
            Text = "Next Presenter",
            Position = {349,172},
            Size = {120,30},
            FontSize = 14,
            Color = {220,220,220},
            HTextAlign = "Left"
          })
        table.insert(graphics,{
            Type = "Text",
            Text = "Next Event Notes",
            Position = {349,222},
            Size = {120,30},
            FontSize = 14,
            Color = {220,220,220},
            HTextAlign = "Left"
          })
        layout["Next_Event_Title"] = {
          PrettyName = "Next Event Title",
          Style = "Text",
          FontSize = 10,
          IsReadOnly = true,
          Position = {170,198},
          Size = {165,25},
          }
        layout["Next_Event_Subtitle"] = {
          PrettyName = "Next Event Subtitle",
          Style = "Text",
          FontSize = 10,
          IsReadOnly = true,
          Position = {170,247},
          Size = {165,25},
          }
        layout["Next_Presenter"] = {
          PrettyName = "Next Presenter",
          Style = "Text",
          FontSize = 10,
          IsReadOnly = true,
          Position = {349,198},
          Size = {165,25},
          }
        layout["Next_Note"] = {
          PrettyName = "Next Event Notes",
          Style = "Text",
          FontSize = 10,
          IsReadOnly = true,
          Position = {349,247},
          Size = {165,25},
          }        
    elseif CurrentPage == "Messaging" then  
      table.insert(graphics,{ --Timer Messaging background
        Type = "GroupBox",
        Fill = {35,35,35},
        Radius = 8,
        Position = {110,64},
        Size = {470,105}
      })
      table.insert(graphics,{ --Public Messaging background
        Type = "GroupBox",
        Fill = {35,35,35},
        Radius = 8,
        Position = {110,176},
        Size = {470,105}
      })
      table.insert(graphics,{
        Type = "Text",
        Text = "Current Timer Message",
        Position = {168,64},
        Size = {180,30},
        FontSize = 14,
        Color = {220,220,220},
        HTextAlign = "Left"
      })
      layout["Current T-Message"] = {
        PrettyName = "Current Timer Message",
        Style = "Text",
        FontSize = 10,
        IsReadOnly = true,
        Position = {170,89},
        Size = {180,25},
        }
      table.insert(graphics,{
        Type = "Text",
        Text = "Set Timer Message",
        Position = {168,110},
        Size = {180,30},
        FontSize = 14,
        Color = {220,220,220},
        HTextAlign = "Left"
       })          
      layout["TimerMessage"] = {
          PrettyName = "Timer Message",
          Style = "Text",
          FontSize = 10,
          Position = {170,136},
          Size = {180,25},
          }
      table.insert(graphics,{
         Type = "Text",
         Text = "Current Public Message",
         Position = {168,174},
         Size = {180,30},
         FontSize = 14,
         Color = {220,220,220},
         HTextAlign = "Left"
        })
      layout["Current P-Message"] = {
         PrettyName = "Current Public Message",
         Style = "Text",
         FontSize = 10,
         IsReadOnly = true,
         Position = {170,199},
         Size = {180,25},
        }
      table.insert(graphics,{
         Type = "Text",
         Text = "Set Public Message",
         Position = {168,222},
         Size = {180,30},
         FontSize = 14,
         Color = {220,220,220},
         HTextAlign = "Left"
        })
      layout["PublicMessage"] = {
         PrettyName = "Public Message",
         Style = "Text",
         FontSize = 10,
         Position = {170,247},
         Size = {180,25},
        }
      layout["Blink"] = {
          PrettyName = "Blink",
          Style = "Button",
          Radius = 2,
          FontSize = 12,
          StrokeColor = {255,255,255},
          StrokeWidth = 2,
          ButtonVisualStyle = "Flat",
          Position = {455,70},
          Size = {50,90},
          Color = {0,0,0,0},
          ZOrder = 200
        }
        layout["BlinkBlink"] = {
          Style = "Button",
          Radius = 2,
          FontSize = 12,
          StrokeColor = {255,255,255},
          StrokeWidth = 2,
          ButtonVisualStyle = "Flat",
          Position = {455,70},
          Size = {50,90},
          Color = {10,67,185},
          UnlinkOffColor = true,
          OffColor = {28,28,28}
        }
      layout["T-MessageVis"] = {
          PrettyName = "Timer Message Visible",
          Style = "Button",
          Radius = 2,
          FontSize = 12,
          StrokeColor = {255,255,255},
          StrokeWidth = 2,
          ButtonVisualStyle = "Flat",
          Position = {510,70},
          Size = {50,90},
          Color = {10,67,185},
          UnlinkOffColor = true,
          OffColor = {28,28,28}
        }
      layout["P-MessageVis"] = {
          PrettyName = "Public Message Visible",
          Style = "Button",
          Radius = 2,
          FontSize = 12,
          StrokeColor = {255,255,255},
          StrokeWidth = 2,
          ButtonVisualStyle = "Flat",
          Position = {510,183},
          Size = {50,90},
          Color = {10,67,185},
          UnlinkOffColor = true,
          OffColor = {28,28,28}
        }
      layout["Send TimerMessage"] = {
          PrettyName = "Send Timer Message",
          Style = "Button",
          Radius = 1,
          FontSize = 12,
          StrokeColor = {255,255,255},
          StrokeWidth = 1,
          ButtonVisualStyle = "Flat",
          Position = {355,133},
          Size = {40,31},
          Color = {34,160,34}
        }
      layout["Send PublicMessage"] = {
          PrettyName = "Send Public Message",
          Style = "Button",
          Radius = 1,
          FontSize = 12,
          StrokeColor = {255,255,255},
          StrokeWidth = 1,
          ButtonVisualStyle = "Flat",
          Position = {355,244},
          Size = {40,31},
          Color = {34,160,34}
        }



    else
        table.insert(graphics,{
          Type = "Text",
          Text = "This plugin is used to control the Ontime stage timer application via its websocket API.You will need Ontime running on a device on the same subnet as the core in order to control. Ontime can be downloaded at https://getontime.no",
          Position = {150,60},
          Size = {400,220},
          FontSize = 18,
          Color = {220,220,220},
          HTextAlign = "Left"
        })
      table.insert(graphics, {
        Type = "Image",
        Image = Logo,
        Size = {92, 92},
        Position = {10,10}
      })

    end
    return layout, graphics
  end
  
  --Start event based logic
if Controls then

  --Variables--

  IP = Controls.ontime_IP
  delay = Timer.New()
  datadelay = Timer.New()
  json = require("rapidjson")
  ws = WebSocket.New()


IP.EventHandler = function()
    if IP.String == "" then  -- If the user enters blank IP stop communication
      Disconnect()
    else
      Connect()  -- Otherwise Call Connect when the IPAddress EventHandler is called
    end
 end
function Connect()
  if IP.String ~= "" then
    local URL = Controls.ontime_IP.String
    ws:Connect("ws",URL,"/ws", 4001)
    --datadelay:Start(.25)
  end
 end
ws.Connected = function()
    local URL = Controls.ontime_IP.String
    print("Websocket Connected:"..URL.."/ws:4001")
  end
function Disconnect()
   ws:Close()
   print("Disconnected")
 end
ws.Data = function ( ws, data) ---All of feedback
    --print("Data", data)
    --datadelay:Stop()
    response = data
    responsetbl = json.decode(response)
    if responsetbl.type == "ontime-log"
        then
            print ("Command Issued")
        elseif
        responsetbl.type == "client-name"
        then
            print("Initial Feedback Recieved")
        elseif
        responsetbl.payload.timer.current ~= nil then
            Timer = 0000
            Timer = responsetbl.payload.timer.current
            local str = Timer
            local len = string.len(str)
    
         if string.sub(str, 1, 1) ~= "-" then
            TimerNeg = false
         if len == 3 then
            Timer = 0000
         elseif len == 4 then
            local firstOne = string.sub(str, 1, 1)
            Timer = firstOne -- Output: "1"
         elseif len == 5 then
            local firstTwo = string.sub(str, 1, 2)
            Timer = firstTwo -- Output: "12"
         elseif len == 6 then
            local firstThree = string.sub(str, 1, 3)
            Timer = firstThree -- Output: "123"
         elseif len == 7 then
            local firstFour = string.sub(str, 1, 4)
            Timer = firstFour -- Output: "1234"
         elseif len == 8 then
            local firstFive = string.sub(str, 1, 5)
            Timer = firstFive -- Output: "12345"
         elseif len == 9 then
            local firstSix = string.sub(str, 1, 6)
            Timer = firstSix -- Output: "123456"
         end
         elseif string.sub(str, 1, 1) == "-" then
            TimerNeg = true
         if len == 4 then
            Timer = 0000 -- len of 4 while negative will be less than 1 second, beyond the accuracy of the plugin
         elseif len == 5 then
            local firstTwo = string.sub(str, 2, 2)
            Timer = firstTwo -- Output: "12"
         elseif len == 6 then
            local firstThree = string.sub(str, 2, 3)
            Timer = firstThree -- Output: "123"
         elseif len == 7 then
            local firstFour = string.sub(str, 2, 4)
            Timer = firstFour -- Output: "1234"
         elseif len == 8 then
            local firstFive = string.sub(str, 2, 5)
            Timer = firstFive -- Output: "12345"
         elseif len == 9 then
            local firstSix = string.sub(str, 2, 6)
            Timer = firstSix -- Output: "123456"
         end
         else
        end
        
         
        tonumber(Timer)
        local seconds = Timer
        local hours = math.floor(seconds / 3600)
        local minutes = math.floor((seconds % 3600) / 60)
        local secondsRemaining = seconds % 60
        -- Format the time as HH:MM:SS
        local timerFormatted = string.format("%02d:%02d:%02d", hours, minutes, secondsRemaining)
        local timernegFormatted = string.format("-".."%02d:%02d:%02d", hours, minutes, secondsRemaining)
        if TimerNeg == true then
          Controls.Neg_Time_Remaining.String = timernegFormatted
          Controls.Time_Remaining.String = ""
         elseif Timer then
          Controls.Time_Remaining.String = timerFormatted
          Controls.Neg_Time_Remaining.String = ""
        end
         -- Event Title
        Title = responsetbl.payload.eventNow.title
        if Title then
          Controls.Event_Title.String = Title
        end
         -- Event Subtile
        Sub = responsetbl.payload.eventNow.subtitle
        if Sub then
          Controls.Event_Subtitle.String = Sub
        end
         -- Current Presenter
        Presenter = responsetbl.payload.eventNow.presenter
        if Presenter then
          Controls.Presenter.String = Presenter
        end 
         -- Event Notes
        Note = responsetbl.payload.eventNow.note
        if Note then  
          Controls.Note.String = Note
        end
         -- Event Number. Feedback was starting at 0 even though Event ID in application was 1 so added 1 to each returned feedback
        Index = responsetbl.payload.loaded.selectedEventIndex + 1
        if Index then
          Controls.Event_Index.Value = Index
        end
        numEvents = responsetbl.payload.loaded.numEvents
        if Index then
          Controls.Event_Total.Value = numEvents
        end
         -- Next Event Tile
        if Index ~= numEvents then
         NextTitle = responsetbl.payload.eventNext.title
         --end
         if NextTitle then
         Controls.Next_Event_Title.String = NextTitle
         else
         end
         -- Next Event Subtitle
         NextSub = responsetbl.payload.eventNext.subtitle
         if NextSub then
         Controls.Next_Event_Subtitle.String = NextSub
         end
         -- Next Presenter
         NextPresenter = responsetbl.payload.eventNext.presenter
         if NextPresenter then
         Controls.Next_Presenter.String = NextPresenter
         end 
         -- Next Event Notes
         NextNote = responsetbl.payload.eventNext.note
         if NextNote then  
         Controls.Next_Note.String = NextNote
         end
        else
        end
       -- Is Ontime On Air
        onAir = responsetbl.payload.onAir
        if onAir == true then  
          Controls.On_Air.Value = true
        else
          Controls.On_Air.Value = false
        end 
        -- is Ontime Timer Blinking
        blinktime = responsetbl.payload.timerMessage.timerBlink
        if blinktime == true then 
          Controls.Blink.Value = 1
          startFlashTimer()
        else
          Controls.Blink.Value = 0
          stopFlashTimer()
        end 
        -- is Ontime  Time Message Blank
        blanktime = responsetbl.payload.timerMessage.timerBlackout
        if blanktime == true then  
          Controls.Blank.Value = true
          Controls.Time_Remaining.IsInvisible = true
          Controls.Neg_Time_Remaining.IsInvisible = true
        else
          Controls.Blank.Value = false
          Controls.Time_Remaining.IsInvisible = false
          Controls.Neg_Time_Remaining.IsInvisible = false
        end
        -- is Ontime Time Message visible
        blanktime = responsetbl.payload.timerMessage.visible
        if blanktime == true then  
          Controls["T-MessageVis"].Value = true
        else
          Controls["T-MessageVis"].Value = false
        end
        -- What is Ontime Current Time Message
        timermes = responsetbl.payload.timerMessage.text
        if timermes then  
          Controls["Current T-Message"].String = timermes
        end
        -- What is Ontime Current Public Message
        pubmes = responsetbl.payload.publicMessage.text
        if pubmes then  
          Controls["Current P-Message"].String = pubmes
        end
        -- is Ontime Public Message visible
        blanktime = responsetbl.payload.publicMessage.visible
        if blanktime == true then  
          Controls["P-MessageVis"].Value = true
        else
          Controls["P-MessageVis"].Value = false
        end
    end
 end
Controls.Play.EventHandler = function (Play)
     PLYMS = {
      type = "start",
      payload = {}
    }
    -- Convert the Lua table to a JSON string
    local play_command = json.encode(PLYMS)
    ws:Write(play_command, false)
    print("sending", play_command)
 end
Controls.Pause.EventHandler = function (Pause)
    Pausems= {
        type = "pause",
        payload = {}
      }
      -- Convert the Lua table to a JSON string
      local pause_command = json.encode(Pausems)
      ws:Write(pause_command, false)
      print("sending", pause_command)
   end
Controls.Next.EventHandler = function (Next)
    nextms= {
        type = "next",
        payload = {}
      }
      -- Convert the Lua table to a JSON string
      local next_command = json.encode(nextms)
      ws:Write(next_command, false)
      print("sending", next_command)
   end
Controls.Previous.EventHandler = function (Previous)
    Prems= {
        type = "previous",
        payload = {}
      }
      -- Convert the Lua table to a JSON string
      local pre_command = json.encode(Prems)
      ws:Write(pre_command, false)
      print("sending", pre_command)
   end
Controls.Restart.EventHandler = function (Restart)
    Restartms= {
        type = "reload",
        payload = {}
      }
      -- Convert the Lua table to a JSON string
      local restart_command = json.encode(Restartms)
      ws:Write(restart_command, false)
      print("sending", restart_command)
   end
Controls["Set_OnAir"].EventHandler = function ()
    if Controls["Set_OnAir"].Boolean
    then
    OnAirms= {
       type = "set-onair",
       payload = true
    }
    else
    OnAirms = {
      type = "set-onair",
      payload = false
    }
   end
    -- Convert the Lua table to a JSON string
    local OnAir_command = json.encode(OnAirms)
    ws:Write(OnAir_command, false)
    print("sending", OnAir_command)
  end
---vvvvvvvFlashing Blink Logic :|
function flashButton()
  Controls.BlinkBlink.Value = (Controls.BlinkBlink.Value == 1) and 0 or 1
  -- Update the visual appearance of the flashing button based on its value
  -- You may need to replace the line above with the appropriate code for your UI library

  -- Flash the strings based on the same toggle
  if Controls.BlinkBlink.Value == 1 then
      Controls.Neg_Time_Remaining.IsDisabled = true--not Controls.Neg_Time_Remaining.IsDisabled 
      Controls.Time_Remaining.IsDisabled  = true--not Controls.Time_Remaining.IsDisabled 
  else
      Controls.Neg_Time_Remaining.IsDisabled  = false -- Reset the visibility when flashing stops
      Controls.Time_Remaining.IsDisabled  = false -- Reset the visibility when flashing stops
  end
 end
function startFlashTimer()
  -- Start the timer for flashing
  delay:Start(.6)
 end
function stopFlashTimer()
  -- Stop the flashing timer
  delay:Stop()
  Controls.BlinkBlink.Value = 0 -- Reset the visibility when flashing stops
  Controls.Neg_Time_Remaining.IsDisabled  = false -- Reset the visibility when flashing stops
  Controls.Time_Remaining.IsDisabled  = false -- Reset the visibility when flashing stops
   -- Reset the value to 0 when the flashing stops
  -- Update the visual appearance of the flashing button to its initial state
  -- You may need to replace the line above with the appropriate code for your UI library
 end

function Blink()
  local BCMD

  if Controls.Blink.Value == 1 then
      -- Start the flashing timer
      Controls.BlinkBlink.Value = 1
      Controls.Neg_Time_Remaining.IsDisabled = true
      Controls.Time_Remaining.IsDisabled  = true
      startFlashTimer()
      BCMD = {
          type = "set-timer-blink",
          payload = true
      }
  else
      -- Stop the flashing timer
      stopFlashTimer()
      BCMD = {
          type = "set-timer-blink",
          payload = false
      }
  end

  -- Convert the Lua table to a JSON string
  local blink_command = json.encode(BCMD)
  ws:Write(blink_command, false)
  print("sending", blink_command)
 end
---^^^^^^Flashing Blink Logic :|
Controls["T-MessageVis"].EventHandler = function (PresTextVis)
    if Controls["T-MessageVis"].Boolean
    then 
      TVCMD= {
      type = "set-timer-message-visible",
      payload = true
    }
    else
      TVCMD= {
      type = "set-timer-message-visible",
      payload = false
    }
    end
    -- Convert the Lua table to a JSON string
    local textvis_command = json.encode(TVCMD)
    ws:Write(textvis_command, false)
    print("sending", textvis_command)
  end
Controls["P-MessageVis"].EventHandler = function (PubTextVis)
    if Controls["P-MessageVis"].Boolean
    then 
      pubTVCMD= {
      type = "set-public-message-visible",
      payload = true
    }
    else
      pubTVCMD= {
      type = "set-public-message-visible",
      payload = false
    }
    end
    -- Convert the Lua table to a JSON string
    local pubtextvis_command = json.encode(pubTVCMD)
    ws:Write(pubtextvis_command, false)
    print("sending", pubtextvis_command)
  end   
Controls["Send TimerMessage"].EventHandler = function (PresMess) --ws
    local PresText = Controls["TimerMessage"].String
    local text = {
      type = "set-timer-message-text",
      payload = PresText  -- Replace with the actual string you want to send
    }
    local json_message = json.encode(text)
    print("sending", json_message)
    ws:Write(json_message, false) 
  end
Controls["Send PublicMessage"].EventHandler = function (PubMess) --ws
    local pubText = Controls["PublicMessage"].String
    local text = {
      type = "set-public-message-text",
      payload = pubText}
    local json_message = json.encode(text)
        print("sending", json_message)
        ws:Write(json_message, false)
  end
Controls.Blank.EventHandler = function (BlackOut)
    if Controls.Blank.Boolean
    then
    BOCMD = {
      type = "set-timer-blackout",
      payload = true
    }
    Controls.Time_Remaining.IsInvisible = true
    Controls.Neg_Time_Remaining.IsInvisible = true
    else
     BOCMD = { 
      type = "set-timer-blackout",
      payload = false}
     Controls.Time_Remaining.IsInvisible = false
     Controls.Neg_Time_Remaining.IsInvisible = false
    end
    -- Convert the Lua table to a JSON string
    local black_command = json.encode(BOCMD)
    ws:Write(black_command, false)
    print("sending", black_command)
 end 

Controls.Blink.EventHandler = Blink
delay.EventHandler = flashButton
--datadelay.EventHandler = feedback


--Run At Start

Connect()

end